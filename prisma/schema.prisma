// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_SOURCE")
}

model User {
  id        Int                   @id @default(autoincrement())
  name      String
  email     String                @unique
  password  String //in caase of google login no password
  loginType AvailableSocialLogins @default(EMAIL_PASSWORD)

  refreshTokens      RefreshToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  passwordResetToken PasswordResetToken[]
  Cart               Cart[]
  Product            Product[]
  EcomOrder          EcomOrder[]

  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  used      Boolean
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum AvailableSocialLogins {
  GOOGLE
  EMAIL_PASSWORD
}

model Cart {
  id      Int  @id @default(autoincrement())
  ownerId Int
  user    User @relation(fields: [ownerId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
}

model CartItem {
  id     Int  @id @default(autoincrement())
  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int @default(1)
}

//!for the multiple array off Images just create a seperate model for manny-many realtio
model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float  @default(0)
  stock       Int    @default(0)

  mainImageUrl String // Foreign key to Image (main product image)

  ownerId Int // Foreign key to User (product owner)
  owner   User @relation(fields: [ownerId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

// EcomOrder model to handle order processing
model EcomOrder {
  id         Int  @id @default(autoincrement())
  customerId Int
  customer   User @relation(fields: [customerId], references: [id])

  items OrderItem[]

  orderPrice      Float
  paymentProvider String
  paymentId       String? @unique
  isPaymentDone   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id      Int       @id @default(autoincrement())
  orderId Int
  order   EcomOrder @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int @default(1)
}

model ApiUsageLog {
  id        Int      @id @default(autoincrement())
  method    String
  endpoint  String
  timestamp DateTime @default(now())
  userId    Int? // If tracking user-based API usage
  ipAddress String
}
